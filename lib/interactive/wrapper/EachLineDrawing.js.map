{"version":3,"sources":["../../../../src/lib/interactive/wrapper/EachLineDrawing.js"],"names":["getNewXY","EachLineDrawing","props","handleHover","bind","isHover","saveNodeType","nodes","state","hover","moreProps","hovering","setState","path","stroke","strokeWidth","strokeOpacity","strokeDasharray","lineInteractiveCursor","hoverText","selected","hoverTextEnabled","enable","hoverTextSelected","selectedText","hoverTextUnselected","text","restHoverTextProps","xScale","yScale","chartConfig","xAccessor","plotData","mouseXY","mouseY","x","domain","slice","sort","small","big","y","invert","newY","Math","min","max","propTypes","any","isRequired","index","number","onDrag","func","onEdge1Drag","onEdge2Drag","onDragComplete","onSelect","onUnSelect","r","defaultClassName","string","bool","oneOf","edgeStrokeWidth","edgeStroke","edgeInteractiveCursor","edgeFill","object","defaultProps"],"mappings":";;;;;;;;;;;;QAoLgBA,Q,GAAAA,Q;;AApLhB;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA;;;;;;;;;;;;;AADA;;;IAGMC,e;;;AACL,0BAAYC,KAAZ,EAAmB;AAAA;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAVkB,gIACZA,KADY;;AAYlB,QAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,OAAnB;;AAEA,QAAKC,OAAL,GAAe,gBAAQD,IAAR,OAAf;AACA,QAAKE,YAAL,GAAoB,qBAAaF,IAAb,OAApB;AACA,QAAKG,KAAL,GAAa,EAAb;;AAEA,QAAKC,KAAL,GAAa;AACZC,UAAO;AADK,GAAb;AAlBkB;AAqBlB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;8BACYC,S,EAAW;AACtB,OAAI,KAAKF,KAAL,CAAWC,KAAX,KAAqBC,UAAUC,QAAnC,EAA6C;AAC5C,SAAKC,QAAL,CAAc;AACbH,YAAOC,UAAUC;AADJ,KAAd;AAGA;AACD;;;2BACQ;AAAA,gBAiBJ,KAAKT,KAjBD;AAAA,OAEPW,IAFO,UAEPA,IAFO;AAAA,OAGPC,MAHO,UAGPA,MAHO;AAAA,OAIPC,WAJO,UAIPA,WAJO;AAAA,OAKPC,aALO,UAKPA,aALO;AAAA,OAMPC,eANO,UAMPA,eANO;AAAA,OAYPC,qBAZO,UAYPA,qBAZO;AAAA,OAa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","file":"EachLineDrawing.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { ascending as d3Ascending } from \"d3-array\";\nimport { noop, strokeDashTypes } from \"../../utils\";\nimport { saveNodeType, isHover } from \"../utils\";\nimport { getXValue } from \"../../utils/ChartDataUtil\";\n\nimport Line from \"../components/Line\";\n// import ClickableCircle from \"../components/ClickableCircle\";\nimport HoverTextNearMouse from \"../components/HoverTextNearMouse\";\n\nclass EachLineDrawing extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// this.handleEdge1Drag = this.handleEdge1Drag.bind(this);\n\t\t// this.handleEdge2Drag = this.handleEdge2Drag.bind(this);\n\t\t// this.handleLineDragStart = this.handleLineDragStart.bind(this);\n\t\t// this.handleLineDrag = this.handleLineDrag.bind(this);\n\t\t//\n\t\t// this.handleEdge1DragStart = this.handleEdge1DragStart.bind(this);\n\t\t// this.handleEdge2DragStart = this.handleEdge2DragStart.bind(this);\n\t\t// this.handleDragComplete = this.handleDragComplete.bind(this);\n\n\t\tthis.handleHover = this.handleHover.bind(this);\n\n\t\tthis.isHover = isHover.bind(this);\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.nodes = {};\n\n\t\tthis.state = {\n\t\t\thover: false,\n\t\t};\n\t}\n\t// handleLineDragStart() {\n\t// \tconst {\n\t// \t\tx1Value, y1Value,\n\t// \t\tx2Value, y2Value,\n\t// \t} = this.props;\n\t//\n\t// \tthis.dragStart = {\n\t// \t\tx1Value, y1Value,\n\t// \t\tx2Value, y2Value,\n\t// \t};\n\t// }\n\t// handleLineDrag(moreProps) {\n\t// \tconst { index, onDrag } = this.props;\n\t//\n\t// \tconst {\n\t// \t\tx1Value, y1Value,\n\t// \t\tx2Value, y2Value,\n\t// \t} = this.dragStart;\n\t//\n\t// \tconst { xScale, chartConfig: { yScale }, xAccessor, fullData } = moreProps;\n\t// \tconst { startPos, mouseXY } = moreProps;\n\t//\n\t// \tconst x1 = xScale(x1Value);\n\t// \tconst y1 = yScale(y1Value);\n\t// \tconst x2 = xScale(x2Value);\n\t// \tconst y2 = yScale(y2Value);\n\t//\n\t// \tconst dx = startPos[0] - mouseXY[0];\n\t// \tconst dy = startPos[1] - mouseXY[1];\n\t//\n\t// \tconst newX1Value = getXValue(xScale, xAccessor, [x1 - dx, y1 - dy], fullData);\n\t// \tconst newY1Value = yScale.invert(y1 - dy);\n\t// \tconst newX2Value = getXValue(xScale, xAccessor, [x2 - dx, y2 - dy], fullData);\n\t// \tconst newY2Value = yScale.invert(y2 - dy);\n\t//\n\t// \tonDrag(index, {\n\t// \t\tx1Value: newX1Value,\n\t// \t\ty1Value: newY1Value,\n\t// \t\tx2Value: newX2Value,\n\t// \t\ty2Value: newY2Value,\n\t// \t});\n\t// }\n\t// handleEdge1DragStart() {\n\t// \tthis.setState({\n\t// \t\tanchor: \"edge2\"\n\t// \t});\n\t// }\n\t// handleEdge2DragStart() {\n\t// \tthis.setState({\n\t// \t\tanchor: \"edge1\"\n\t// \t});\n\t// }\n\t// handleDragComplete(...rest) {\n\t// \tthis.setState({\n\t// \t\tanchor: undefined\n\t// \t});\n\t// \tthis.props.onDragComplete(...rest);\n\t// }\n\t// handleEdge1Drag(moreProps) {\n\t// \tconst { index, onDrag } = this.props;\n\t// \tconst {\n\t// \t\tx2Value, y2Value,\n\t// \t} = this.props;\n\t//\n\t// \tconst [x1Value, y1Value] = getNewXY(moreProps);\n\t//\n\t// \tonDrag(index, {\n\t// \t\tx1Value,\n\t// \t\ty1Value,\n\t// \t\tx2Value,\n\t// \t\ty2Value,\n\t// \t});\n\t// }\n\t// handleEdge2Drag(moreProps) {\n\t// \tconst { index, onDrag } = this.props;\n\t// \tconst {\n\t// \t\tx1Value, y1Value,\n\t// \t} = this.props;\n\t//\n\t// \tconst [x2Value, y2Value] = getNewXY(moreProps);\n\t//\n\t// \tonDrag(index, {\n\t// \t\tx1Value,\n\t// \t\ty1Value,\n\t// \t\tx2Value,\n\t// \t\ty2Value,\n\t// \t});\n\t// }\n\thandleHover(moreProps) {\n\t\tif (this.state.hover !== moreProps.hovering) {\n\t\t\tthis.setState({\n\t\t\t\thover: moreProps.hovering\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\tconst {\n\t\t\tpath,\n\t\t\tstroke,\n\t\t\tstrokeWidth,\n\t\t\tstrokeOpacity,\n\t\t\tstrokeDasharray,\n\t\t\t// r,\n\t\t\t// edgeStrokeWidth,\n\t\t\t// edgeFill,\n\t\t\t// edgeStroke,\n\t\t\t// edgeInteractiveCursor,\n\t\t\tlineInteractiveCursor,\n\t\t\thoverText,\n\t\t\tselected,\n\n\t\t\t// onDragComplete,\n\t\t} = this.props;\n\n\t\tconst {\n\t\t\tenable: hoverTextEnabled,\n\t\t\tselectedText: hoverTextSelected,\n\t\t\ttext: hoverTextUnselected,\n\t\t\t...restHoverTextProps\n\t\t} = hoverText;\n\n\t\tconst { hover } = this.state;\n\n\t\treturn <g>\n\t\t\t<Line\n\t\t\t\tref={this.saveNodeType(\"drawing\")}\n\t\t\t\tselected={selected || hover}\n\t\t\t\tonHover={this.handleHover}\n\t\t\t\tonUnHover={this.handleHover}\n\t\t\t\tpath={path}\n\t\t\t\tstroke={stroke}\n\t\t\t\tstrokeWidth={(hover || selected) ? strokeWidth + 1 : strokeWidth}\n\t\t\t\tstrokeOpacity={strokeOpacity}\n\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\tinteractiveCursorClass={lineInteractiveCursor}\n\t\t\t/>\n\t\t\t<HoverTextNearMouse\n\t\t\t\tshow={hoverTextEnabled && hover}\n\t\t\t\t{...restHoverTextProps}\n\t\t\t\ttext={selected ? hoverTextSelected : hoverTextUnselected}\n\t\t\t/>\n\t\t</g>;\n\t}\n}\n\nexport function getNewXY(moreProps) {\n\tconst { xScale, chartConfig: { yScale }, xAccessor, plotData, mouseXY } = moreProps;\n\tconst mouseY = mouseXY[1];\n\n\tconst x = getXValue(xScale, xAccessor, mouseXY, plotData);\n\n\tconst [small, big] = yScale.domain().slice().sort(d3Ascending);\n\tconst y = yScale.invert(mouseY);\n\tconst newY = Math.min(Math.max(y, small), big);\n\n\treturn [x, newY];\n}\n\nEachLineDrawing.propTypes = {\n\tpath: PropTypes.any.isRequired,\n\n\tindex: PropTypes.number,\n\n\tonDrag: PropTypes.func.isRequired,\n\tonEdge1Drag: PropTypes.func.isRequired,\n\tonEdge2Drag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonSelect: PropTypes.func.isRequired,\n\tonUnSelect: PropTypes.func.isRequired,\n\n\tr: PropTypes.number.isRequired,\n\tstrokeOpacity: PropTypes.number.isRequired,\n\tdefaultClassName: PropTypes.string,\n\n\tselected: PropTypes.bool,\n\n\tstroke: PropTypes.string.isRequired,\n\tstrokeWidth: PropTypes.number.isRequired,\n\tstrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n\n\tedgeStrokeWidth: PropTypes.number.isRequired,\n\tedgeStroke: PropTypes.string.isRequired,\n\tedgeInteractiveCursor: PropTypes.string.isRequired,\n\tlineInteractiveCursor: PropTypes.string.isRequired,\n\tedgeFill: PropTypes.string.isRequired,\n\thoverText: PropTypes.object.isRequired,\n};\n\nEachLineDrawing.defaultProps = {\n\tonDrag: noop,\n\tonEdge1Drag: noop,\n\tonEdge2Drag: noop,\n\tonDragComplete: noop,\n\tonSelect: noop,\n\tonUnSelect: noop,\n\n\tselected: false,\n\n\tedgeStroke: \"#000000\",\n\tedgeFill: \"#FFFFFF\",\n\tedgeStrokeWidth: 2,\n\tr: 5,\n\tstrokeWidth: 1,\n\tstrokeOpacity: 1,\n\tstrokeDasharray: \"Solid\",\n\thoverText: {\n\t\tenable: false,\n\t}\n};\n\nexport default EachLineDrawing;\n"]}