{"version":3,"sources":["../../../../src/lib/interactive/components/Line.js"],"names":["Line","props","renderSVG","bind","isHover","moreProps","stroke","strokeWidth","strokeOpacity","strokeDasharray","xScale","yScale","chartConfig","lineWidth","path","line","x","d","y","curve","selected","interactiveCursorClass","onDragStart","onDrag","onDragComplete","onHover","onUnHover","drawOnCanvas","propTypes","array","isRequired","string","number","oneOf","func","defaultClassName","r","edgeFill","edgeStroke","edgeStrokeWidth","withEdge","bool","children","tolerance","defaultProps"],"mappings":"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","file":"Line.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { line as d3Line, curveBasis as d3CurveBasis } from \"d3-shape\";\n\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport {\n\t// isDefined,\n\tnoop,\n\t// hexToRGBA,\n\tgetStrokeDasharray,\n\tstrokeDashTypes,\n} from \"../../utils\";\n\nclass Line extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.renderSVG = this.renderSVG.bind(this);\n\t\t// this.drawOnCanvas = this.drawOnCanvas.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t}\n\tisHover() {\n\t\t// const { tolerance, onHover } = this.props;\n\n\t\treturn false;\n\t}\n\t// drawOnCanvas(ctx, moreProps) {\n\t// \tconst { stroke, strokeWidth, strokeOpacity, strokeDasharray } = this.props;\n\t// \tconst { x1, y1, x2, y2 } = helper(this.props, moreProps);\n\t//\n\t// \tctx.lineWidth = strokeWidth;\n\t// \tctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\t// \tctx.setLineDash(getStrokeDasharray(strokeDasharray).split(\",\"));\n\t//\n\t// \tctx.beginPath();\n\t// \tctx.moveTo(x1, y1);\n\t// \tctx.lineTo(x2, y2);\n\t// \tctx.stroke();\n\t// }\n\trenderSVG(moreProps) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, strokeDasharray } = this.props;\n\t\tconst { xScale, chartConfig: { yScale } } = moreProps;\n\t\tconst lineWidth = strokeWidth;\n\n\t\tconst { path } = this.props;\n\t\tconst line = d3Line()\n\t\t\t.x(d => xScale(d[0]))\n\t\t\t.y(d => yScale(d[1]))\n\t\t\t.curve(d3CurveBasis);\n\t\tconst d = line(path);\n\n\t\treturn (\n\t\t\t<path\n\t\t\t\td={d}\n\t\t\t\tstroke={stroke} strokeWidth={lineWidth}\n\t\t\t\tstrokeDasharray={getStrokeDasharray(strokeDasharray)}\n\t\t\t\tstrokeOpacity={strokeOpacity}\n\t\t\t\tfill=\"none\"/>\n\t\t);\n\t}\n\trender() {\n\t\tconst { selected, interactiveCursorClass } = this.props;\n\t\tconst { onDragStart, onDrag, onDragComplete, onHover, onUnHover } = this.props;\n\n\t\treturn <GenericChartComponent\n\t\t\tisHover={this.isHover}\n\n\t\t\tsvgDraw={this.renderSVG}\n\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\tcanvasDraw={this.drawOnCanvas}\n\n\t\t\tinteractiveCursorClass={interactiveCursorClass}\n\t\t\tselected={selected}\n\n\t\t\tonDragStart={onDragStart}\n\t\t\tonDrag={onDrag}\n\t\t\tonDragComplete={onDragComplete}\n\t\t\tonHover={onHover}\n\t\t\tonUnHover={onUnHover}\n\n\t\t\tdrawOn={[\"mousemove\", \"pan\", \"drag\"]}\n\t\t/>;\n\t}\n}\n\n// export function isHovering2(start, end, [mouseX, mouseY], tolerance) {\n// \tconst m = getSlope(start, end);\n//\n// \tif (isDefined(m)) {\n// \t\tconst b = getYIntercept(m, end);\n// \t\tconst y = m * mouseX + b;\n// \t\treturn (mouseY < y + tolerance)\n// \t\t\t&& mouseY > (y - tolerance)\n// \t\t\t&& mouseX > Math.min(start[0], end[0]) - tolerance\n// \t\t\t&& mouseX < Math.max(start[0], end[0]) + tolerance;\n// \t} else {\n// \t\treturn mouseY >= Math.min(start[1], end[1])\n// \t\t\t&& mouseY <= Math.max(start[1], end[1])\n// \t\t\t&& mouseX < start[0] + tolerance\n// \t\t\t&& mouseX > start[0] - tolerance;\n// \t}\n// }\n\n// export function isHovering({\n// \tx1Value, y1Value,\n// \tx2Value, y2Value,\n// \tmouseXY,\n// \ttype,\n// \ttolerance,\n// \txScale,\n// \tyScale,\n// }) {\n//\n// \tconst line = generateLine({\n// \t\ttype,\n// \t\tstart: [x1Value, y1Value],\n// \t\tend: [x2Value, y2Value],\n// \t\txScale,\n// \t\tyScale,\n// \t});\n//\n// \tconst start = [xScale(line.x1), yScale(line.y1)];\n// \tconst end = [xScale(line.x2), yScale(line.y2)];\n//\n// \tconst m = getSlope(start, end);\n// \tconst [mouseX, mouseY] = mouseXY;\n//\n// \tif (isDefined(m)) {\n// \t\tconst b = getYIntercept(m, end);\n// \t\tconst y = m * mouseX + b;\n//\n// \t\treturn mouseY < (y + tolerance)\n// \t\t\t&& mouseY > (y - tolerance)\n// \t\t\t&& mouseX > Math.min(start[0], end[0]) - tolerance\n// \t\t\t&& mouseX < Math.max(start[0], end[0]) + tolerance;\n// \t} else {\n// \t\treturn mouseY >= Math.min(start[1], end[1])\n// \t\t\t&& mouseY <= Math.max(start[1], end[1])\n// \t\t\t&& mouseX < start[0] + tolerance\n// \t\t\t&& mouseX > start[0] - tolerance;\n// \t}\n// }\n\nLine.propTypes = {\n\tpath: PropTypes.array.isRequired,\n\n\tinteractiveCursorClass: PropTypes.string,\n\tstroke: PropTypes.string.isRequired,\n\tstrokeWidth: PropTypes.number.isRequired,\n\tstrokeOpacity: PropTypes.number.isRequired,\n\tstrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n\n\tonDragStart: PropTypes.func.isRequired,\n\tonDrag: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\n\tdefaultClassName: PropTypes.string,\n\n\tr: PropTypes.number.isRequired,\n\tedgeFill: PropTypes.string.isRequired,\n\tedgeStroke: PropTypes.string.isRequired,\n\tedgeStrokeWidth: PropTypes.number.isRequired,\n\twithEdge: PropTypes.bool.isRequired,\n\tchildren: PropTypes.func.isRequired,\n\ttolerance: PropTypes.number.isRequired,\n\tselected: PropTypes.bool.isRequired,\n};\n\nLine.defaultProps = {\n\tonDragStart: noop,\n\tonDrag: noop,\n\tonDragComplete: noop,\n\n\tedgeStrokeWidth: 3,\n\tedgeStroke: \"#000000\",\n\tedgeFill: \"#FFFFFF\",\n\tr: 10,\n\twithEdge: false,\n\tstrokeWidth: 1,\n\tstrokeDasharray: \"Solid\",\n\tchildren: noop,\n\ttolerance: 7,\n\tselected: false,\n};\n\nexport default Line;\n"]}