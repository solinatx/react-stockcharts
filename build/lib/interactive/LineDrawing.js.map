{"version":3,"sources":["../../../src/lib/interactive/LineDrawing.js"],"names":["LineDrawing","props","handleStart","bind","handleEnd","handleDrawLine","terminate","saveNodeType","getSelectionState","drawings","state","nodes","xyValue","current","path","mouseMoved","setState","concat","moreProps","e","onStart","appearance","newDrawings","map","d","selected","onComplete","enabled","snap","shouldDisableSnap","snapTo","currentPositionRadius","currentPositionStroke","currentPositionstrokeOpacity","currentPositionStrokeWidth","hoverText","override","tempLine","stroke","strokeWidth","strokeOpacity","each","idx","eachAppearance","hoverTextWithDefault","defaultProps","strokeDasharray","edgeStroke","edgeFill","edgeStrokeWidth","r","handleDragLine","handleDragLineComplete","propTypes","bool","isRequired","func","onSelect","string","number","object","array","shape","oneOf","button","shiftKey","enable","bgHeight","bgWidth","text","selectedText"],"mappings":"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","file":"LineDrawing.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { isDefined, isNotDefined, noop, strokeDashTypes } from \"../utils\";\n\nimport {\n\tgetValueFromOverride,\n\tterminate,\n\tsaveNodeType,\n\tisHoverForInteractiveType,\n} from \"./utils\";\n\nimport EachLineDrawing from \"./wrapper/EachLineDrawing\";\nimport Line from \"./components/Line\";\nimport MouseLocationIndicator from \"./components/MouseLocationIndicator\";\nimport HoverTextNearMouse from \"./components/HoverTextNearMouse\";\n\nclass LineDrawing extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleStart = this.handleStart.bind(this);\n\t\tthis.handleEnd = this.handleEnd.bind(this);\n\t\tthis.handleDrawLine = this.handleDrawLine.bind(this);\n\t\t// this.handleDragLine = this.handleDragLine.bind(this);\n\t\t// this.handleDragLineComplete = this.handleDragLineComplete.bind(this);\n\n\t\tthis.terminate = terminate.bind(this);\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\n\t\tthis.getSelectionState = isHoverForInteractiveType(\"LineDrawings\")\n\t\t\t.bind(this);\n\n\t\tconst { drawings } = this.props || [];\n\t\tthis.state = {\n\t\t\tdrawings\n\t\t};\n\t\tthis.nodes = [];\n\t}\n\t// handleDragLine(index, newPath) {\n\t// \tthis.setState({\n\t// \t\toverride: {\n\t// \t\t\tindex,\n\t// \t\t\t...newPath\n\t// \t\t}\n\t// \t});\n\t// }\n\t// handleDragLineComplete(moreProps) {\n\t// \tconst { override } = this.state;\n\t// \tif (isDefined(override)) {\n\t// \t\tconst { drawings } = this.props;\n\t// \t\tconst newDrawings = drawings\n\t// \t\t\t.map((each, idx) => idx === override.index\n\t// \t\t\t\t? {\n\t// \t\t\t\t\t...each,\n\t// \t\t\t\t\tpath: override.path,\n\t// \t\t\t\t\tselected: true,\n\t// \t\t\t\t}\n\t// \t\t\t\t: {\n\t// \t\t\t\t\t...each,\n\t// \t\t\t\t\tselected: false,\n\t// \t\t\t\t});\n\t//\n\t// \t\tthis.setState({\n\t// \t\t\toverride: null,\n\t// \t\t}, () => {\n\t// \t\t\tthis.props.onComplete(newDrawings, moreProps);\n\t// \t\t});\n\t// \t}\n\t// }\n\thandleDrawLine(xyValue) {\n\t\tconst { current } = this.state;\n\t\tif (isDefined(current) && isDefined(current.path)) {\n\t\t\tthis.mouseMoved = true;\n\t\t\tthis.setState({\n\t\t\t\tcurrent: {\n\t\t\t\t\tpath: current.path.concat([xyValue]),\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleStart(xyValue, moreProps, e) {\n\t\tconst { current } = this.state;\n\n\t\tif (isNotDefined(current) || isNotDefined(current.path)) {\n\t\t\tthis.mouseMoved = false;\n\n\t\t\tthis.setState({\n\t\t\t\tcurrent: {\n\t\t\t\t\tpath: [xyValue],\n\t\t\t\t},\n\t\t\t}, () => {\n\t\t\t\tthis.props.onStart(moreProps, e);\n\t\t\t});\n\t\t}\n\t}\n\thandleEnd(xyValue, moreProps, e) {\n\t\tconst { current } = this.state;\n\t\tconst { drawings, appearance } = this.props;\n\n\t\tif (this.mouseMoved\n\t\t\t&& isDefined(current)\n\t\t\t&& isDefined(current.path)\n\t\t) {\n\t\t\tconst newDrawings = [\n\t\t\t\t...drawings.map(d => ({ ...d, selected: false })),\n\t\t\t\t{\n\t\t\t\t\tpath: current.path.concat([xyValue]),\n\t\t\t\t\tselected: true,\n\t\t\t\t\tappearance,\n\t\t\t\t}\n\t\t\t];\n\t\t\tthis.setState({\n\t\t\t\tcurrent: null,\n\t\t\t\tdrawings: newDrawings\n\t\t\t}, () => {\n\t\t\t\tthis.props.onComplete(newDrawings, moreProps, e);\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\tconst { appearance } = this.props;\n\t\tconst { enabled, snap, shouldDisableSnap, snapTo } = this.props;\n\t\tconst { currentPositionRadius, currentPositionStroke } = this.props;\n\t\tconst { currentPositionstrokeOpacity, currentPositionStrokeWidth } = this.props;\n\t\tconst { hoverText } = this.props;\n\t\tconst { current, override, drawings } = this.state;\n\n\t\tconst tempLine = isDefined(current) && isDefined(current.path)\n\t\t\t? <Line\n\t\t\t\tnoHover\n\t\t\t\tpath={current.path}\n\t\t\t\tstroke={appearance.stroke}\n\t\t\t\tstrokeWidth={appearance.strokeWidth}\n\t\t\t\tstrokeOpacity={appearance.strokeOpacity} />\n\t\t\t: null;\n\n\t\treturn <g>\n\t\t\t{drawings.map((each, idx) => {\n\t\t\t\tconst eachAppearance = isDefined(each.appearance)\n\t\t\t\t\t? { ...appearance, ...each.appearance }\n\t\t\t\t\t: appearance;\n\n\t\t\t\tconst hoverTextWithDefault = {\n\t\t\t\t\t...LineDrawing.defaultProps.hoverText,\n\t\t\t\t\t...hoverText\n\t\t\t\t};\n\n\t\t\t\treturn <EachLineDrawing key={idx}\n\t\t\t\t\tref={this.saveNodeType(idx)}\n\t\t\t\t\tindex={idx}\n\t\t\t\t\tselected={each.selected}\n\t\t\t\t\tpath={getValueFromOverride(override, idx, \"path\", each.path)}\n\t\t\t\t\tstroke={eachAppearance.stroke}\n\t\t\t\t\tstrokeWidth={eachAppearance.strokeWidth}\n\t\t\t\t\tstrokeOpacity={eachAppearance.strokeOpacity}\n\t\t\t\t\tstrokeDasharray={eachAppearance.strokeDasharray}\n\t\t\t\t\tedgeStroke={eachAppearance.edgeStroke}\n\t\t\t\t\tedgeFill={eachAppearance.edgeFill}\n\t\t\t\t\tedgeStrokeWidth={eachAppearance.edgeStrokeWidth}\n\t\t\t\t\tr={eachAppearance.r}\n\t\t\t\t\thoverText={hoverTextWithDefault}\n\t\t\t\t\tonDrag={this.handleDragLine}\n\t\t\t\t\tonDragComplete={this.handleDragLineComplete}\n\t\t\t\t\tedgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t\tlineInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t/>;\n\t\t\t})}\n\t\t\t{tempLine}\n\t\t\t<MouseLocationIndicator\n\t\t\t\tenabled={enabled}\n\t\t\t\tsnap={snap}\n\t\t\t\tshouldDisableSnap={shouldDisableSnap}\n\t\t\t\tsnapTo={snapTo}\n\t\t\t\tr={currentPositionRadius}\n\t\t\t\tstroke={currentPositionStroke}\n\t\t\t\tstrokeOpacity={currentPositionstrokeOpacity}\n\t\t\t\tstrokeWidth={currentPositionStrokeWidth}\n\t\t\t\tonMouseDown={this.handleStart}\n\t\t\t\tonClick={this.handleEnd}\n\t\t\t\tonMouseMove={this.handleDrawLine}\n\t\t\t\treturnXY={true}\n\t\t\t/>\n\t\t</g>;\n\t}\n}\n\n\nLineDrawing.propTypes = {\n\tsnap: PropTypes.bool.isRequired,\n\tenabled: PropTypes.bool.isRequired,\n\tsnapTo: PropTypes.func,\n\tshouldDisableSnap: PropTypes.func.isRequired,\n\n\tonStart: PropTypes.func.isRequired,\n\tonComplete: PropTypes.func.isRequired,\n\tonSelect: PropTypes.func,\n\n\tcurrentPositionStroke: PropTypes.string,\n\tcurrentPositionStrokeWidth: PropTypes.number,\n\tcurrentPositionstrokeOpacity: PropTypes.number,\n\tcurrentPositionRadius: PropTypes.number,\n\thoverText: PropTypes.object.isRequired,\n\n\tdrawings: PropTypes.array.isRequired,\n\n\tappearance: PropTypes.shape({\n\t\tstroke: PropTypes.string.isRequired,\n\t\tstrokeOpacity: PropTypes.number.isRequired,\n\t\tstrokeWidth: PropTypes.number.isRequired,\n\t\tstrokeDasharray: PropTypes.oneOf(strokeDashTypes),\n\t\tedgeStrokeWidth: PropTypes.number.isRequired,\n\t\tedgeFill: PropTypes.string.isRequired,\n\t\tedgeStroke: PropTypes.string.isRequired,\n\t}).isRequired\n};\n\nLineDrawing.defaultProps = {\n\tonStart: noop,\n\tonComplete: noop,\n\tonSelect: noop,\n\n\tcurrentPositionStroke: \"#000000\",\n\tcurrentPositionstrokeOpacity: 1,\n\tcurrentPositionStrokeWidth: 3,\n\tcurrentPositionRadius: 0,\n\n\tshouldDisableSnap: e => (e.button === 2 || e.shiftKey),\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: \"auto\",\n\t\tbgWidth: \"auto\",\n\t\ttext: \"Click to select object\",\n\t\tselectedText: \"\",\n\t},\n\tdrawings: [],\n\n\tappearance: {\n\t\tstroke: \"#000000\",\n\t\tstrokeOpacity: 1,\n\t\tstrokeWidth: 1,\n\t\tstrokeDasharray: \"Solid\",\n\t\tedgeStrokeWidth: 1,\n\t\tedgeFill: \"#FFFFFF\",\n\t\tedgeStroke: \"#000000\",\n\t\tr: 6,\n\t}\n};\n\nexport default LineDrawing;\n"]}